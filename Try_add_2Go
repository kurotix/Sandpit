import requests
from requests.auth import HTTPBasicAuth
import xml.etree.ElementTree as ET

# Liste des masters à mettre à jour
masters = ["Ilyes", "Nassim", "Lina"]
url_base = "https://jenkins.echonet/cjoc/job/"
username = "votre_nom_d_utilisateur"
api_token = "votre_token_api"

# Fonction pour incrémenter la RAM de +2 Go
def increment_ram(master_name):
    url = f"{url_base}{master_name}/config.xml"

    # Effectuer une requête GET pour obtenir la configuration actuelle (bypass SSL avec verify=False)
    response = requests.get(url, auth=HTTPBasicAuth(username, api_token), verify=False)
    
    if response.status_code == 200:
        # Parsing du fichier XML pour trouver la valeur de la RAM
        root = ET.fromstring(response.content)
        memory_element = root.find(".//memory")
        
        if memory_element is not None:
            # Récupérer la valeur actuelle de la RAM
            current_memory = int(memory_element.text)
            print(f"RAM actuelle pour {master_name} : {current_memory} MB")
            
            # Incrémenter de +2048 MB
            new_memory = current_memory + 2048
            print(f"Nouvelle RAM pour {master_name} : {new_memory} MB")
            
            # Mettre à jour la valeur dans le fichier XML
            memory_element.text = str(new_memory)
            
            # Convertir l'arbre XML modifié en chaîne de caractères pour le POST
            new_config_xml = ET.tostring(root, encoding='utf-8', method='xml')
            
            # Poster la nouvelle configuration avec la RAM incrémentée
            post_url = f"{url_base}{master_name}/config.xml"
            headers = {'Content-Type': 'application/xml'}
            post_response = requests.post(post_url, auth=HTTPBasicAuth(username, api_token), headers=headers, data=new_config_xml, verify=False)
            
            if post_response.status_code == 200:
                print(f"RAM mise à jour avec succès pour {master_name}")
            else:
                print(f"Erreur lors de la mise à jour de la RAM pour {master_name}: {post_response.status_code}")
        else:
            print(f"Aucune mémoire trouvée pour {master_name}")
    else:
        print(f"Erreur lors de la récupération de la configuration pour {master_name}: {response.status_code}")

# Incrémenter la RAM pour chaque master dans la liste
for master in masters:
    increment_ram(master)
